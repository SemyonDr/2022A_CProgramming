----HOMEWORK SUBMISSION NOTES----

1) Should be compiled with maximum flags for warnings: -Wall -ansi -pedantic
2) Submit:
	- source code (files .c .h) (.o files should not be submitted)
	- files of approptiate environment (including Makefile)
	- input files and screenshots of output (after instructions in a problem/lecture/site)
3) Files for every problem should be in separate folder.
4) Name of folder should be the same as name of the file containing main function (not including.c)
5) Program should be submitted in full (including file containing main function) and should be compilable and runnable.
6) Examination of various outputs of execution should be possible without changes in source code (except for macro defined parameters in particular cases)
7) Homework should be submitted in ZIP file.


----HOMEWORK GRADING----

A) Exectution - 20%
The program works following exercise requirements:
	- Achieves ALL goals set in exercise
	- Passes compilation without warnings

B) Documentation - 20%
Documentation should be written along with the code. Don't add commentaries in separate files.
Documentation includes:
 1) Commentary on top of the program that includes:
 	- Short description of program goals
	- Description of how those goals are acheived
	- Description of program modules
	- Description of algorithms
	- Description of input/output
	- All assumptions that you make
 2) For every function prototype (in header file linked to the code) add description of input/output and what function does. Goal is to explain functions for someone that does not have their code.
 3) Before definition of every function comes:
 	- Description of operation
	- Assumptions
	- Algorithm
	Goal is to give introduction to the function operations without detailing them. This description will allow to code reader (who didn't wrote it) to understand the code.
 4) Every variable should have meaningful name and attached description that explaines its role. i,j,k - usually are indexer variables and there is no need to explain them.
 5) - "Magic numbers" should not appear in the program body, except for 0,1 for cycles initialization. 
 	- Constants with meaningful uppercase names should be used instead of magic numbers and documented where they are defined.
	- Every complex type defined with typedef should be documented.
	- Required to give complex types meaningful names and use uppercase letters
 6) Meaningful names should be used when defining:
	- Functions
	- Macros
	- Variables
	- Constants
	- Type definitions
	- Files
 7) Attention should be given to readability and clarity of indentation, that should be structured and consistent.

C) Program - 40%
Attention should be paid to writing modular and structured code:
	- Separation into files - so to every file header file is attached if needed.
	- Separation into functions
	- Usage of macros.
	- Right usage of MAKEFILE (In particular when you are required to divide program into several files in scope of homework)
	- Concealing information - and usage of knowledge simplification
	- Avoidance if possible of using global variables
	- Full and correct usage of tools that language provides.
	- Elegant, not awkward code.

D) Program efficency and overall impression - 20%
Instructions above provide a way to substract points when grading. It is understood that every exercise code should be graded individually in accordance with a given problem.

Penalties will be given in following cases:
	- Environment files are not provided (MAKEFILE) - 20 points
	- In exercises where names for files, functions, parameters are provided different name used - 10 points	